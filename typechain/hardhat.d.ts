/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "AaveAllocator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveAllocator__factory>;
    getContractFactory(
      name: "ILendingPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILendingPool__factory>;
    getContractFactory(
      name: "IStakedTokenIncentivesController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakedTokenIncentivesController__factory>;
    getContractFactory(
      name: "AlchemixAllocator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AlchemixAllocator__factory>;
    getContractFactory(
      name: "IStakingPools",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakingPools__factory>;
    getContractFactory(
      name: "ITokemakManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokemakManager__factory>;
    getContractFactory(
      name: "ITokemaktALCX",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokemaktALCX__factory>;
    getContractFactory(
      name: "ConvexAllocator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConvexAllocator__factory>;
    getContractFactory(
      name: "IConvex",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IConvex__factory>;
    getContractFactory(
      name: "IConvexRewards",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IConvexRewards__factory>;
    getContractFactory(
      name: "ICurve3Pool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICurve3Pool__factory>;
    getContractFactory(
      name: "FraxSharesAllocator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FraxSharesAllocator__factory>;
    getContractFactory(
      name: "IveFXS",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IveFXS__factory>;
    getContractFactory(
      name: "IveFXSYieldDistributorV4",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IveFXSYieldDistributorV4__factory>;
    getContractFactory(
      name: "FraxSharesAllocatorVNext",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FraxSharesAllocatorVNext__factory>;
    getContractFactory(
      name: "GroDAIAllocator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GroDAIAllocator__factory>;
    getContractFactory(
      name: "IGroDepositHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGroDepositHandler__factory>;
    getContractFactory(
      name: "IGroWithdrawHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGroWithdrawHandler__factory>;
    getContractFactory(
      name: "ISwapRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwapRouter__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "ILQTYStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILQTYStaking__factory>;
    getContractFactory(
      name: "IStabilityPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStabilityPool__factory>;
    getContractFactory(
      name: "LUSDAllocator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LUSDAllocator__factory>;
    getContractFactory(
      name: "IStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStaking__factory>;
    getContractFactory(
      name: "MetaGovernanceAllocator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MetaGovernanceAllocator__factory>;
    getContractFactory(
      name: "IMasterChef",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMasterChef__factory>;
    getContractFactory(
      name: "ISushiBar",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISushiBar__factory>;
    getContractFactory(
      name: "OnsenAllocator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OnsenAllocator__factory>;
    getContractFactory(
      name: "IOnsenAllocator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOnsenAllocator__factory>;
    getContractFactory(
      name: "RewardHarvester",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RewardHarvester__factory>;
    getContractFactory(
      name: "OlympusBondDepositoryV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OlympusBondDepositoryV2__factory>;
    getContractFactory(
      name: "GOHM",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GOHM__factory>;
    getContractFactory(
      name: "GOHMInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GOHMInterface__factory>;
    getContractFactory(
      name: "GovernorAlpha",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorAlpha__factory>;
    getContractFactory(
      name: "SOHMInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SOHMInterface__factory>;
    getContractFactory(
      name: "TimelockInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TimelockInterface__factory>;
    getContractFactory(
      name: "GovernorOHMegaDelegate",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorOHMegaDelegate__factory>;
    getContractFactory(
      name: "GovernorOHMegaDelegator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorOHMegaDelegator__factory>;
    getContractFactory(
      name: "GOHMInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GOHMInterface__factory>;
    getContractFactory(
      name: "GovernorAlpha",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorAlpha__factory>;
    getContractFactory(
      name: "GovernorOHMegaDelegateStorageV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorOHMegaDelegateStorageV1__factory>;
    getContractFactory(
      name: "GovernorOHMegaDelegatorStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorOHMegaDelegatorStorage__factory>;
    getContractFactory(
      name: "GovernorOHMegaEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorOHMegaEvents__factory>;
    getContractFactory(
      name: "SOHMInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SOHMInterface__factory>;
    getContractFactory(
      name: "TimelockInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TimelockInterface__factory>;
    getContractFactory(
      name: "Timelock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Timelock__factory>;
    getContractFactory(
      name: "IAllocator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAllocator__factory>;
    getContractFactory(
      name: "IBondDepository",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBondDepository__factory>;
    getContractFactory(
      name: "IBondingCalculator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBondingCalculator__factory>;
    getContractFactory(
      name: "IDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDistributor__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IgOHM",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IgOHM__factory>;
    getContractFactory(
      name: "IGovernable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGovernable__factory>;
    getContractFactory(
      name: "IGuardable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGuardable__factory>;
    getContractFactory(
      name: "INoteKeeper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INoteKeeper__factory>;
    getContractFactory(
      name: "IOHM",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOHM__factory>;
    getContractFactory(
      name: "IOlympusAuthority",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOlympusAuthority__factory>;
    getContractFactory(
      name: "IOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOracle__factory>;
    getContractFactory(
      name: "IOwnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOwnable__factory>;
    getContractFactory(
      name: "IsOHM",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IsOHM__factory>;
    getContractFactory(
      name: "IStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStaking__factory>;
    getContractFactory(
      name: "IStakingV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakingV1__factory>;
    getContractFactory(
      name: "ITeller",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITeller__factory>;
    getContractFactory(
      name: "IManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IManager__factory>;
    getContractFactory(
      name: "ITreasury",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITreasury__factory>;
    getContractFactory(
      name: "ITreasuryV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITreasuryV1__factory>;
    getContractFactory(
      name: "IUniswapV2ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2ERC20__factory>;
    getContractFactory(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Pair__factory>;
    getContractFactory(
      name: "IUniswapV2Router",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router__factory>;
    getContractFactory(
      name: "IWarmup",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWarmup__factory>;
    getContractFactory(
      name: "IwsOHM",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IwsOHM__factory>;
    getContractFactory(
      name: "IYieldDirector",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IYieldDirector__factory>;
    getContractFactory(
      name: "BalancerLiquidityMigrator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BalancerLiquidityMigrator__factory>;
    getContractFactory(
      name: "IBalancerVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBalancerVault__factory>;
    getContractFactory(
      name: "CrossChainMigrator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrossChainMigrator__factory>;
    getContractFactory(
      name: "IMigrator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMigrator__factory>;
    getContractFactory(
      name: "LiquidityMigrator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LiquidityMigrator__factory>;
    getContractFactory(
      name: "OlympusTokenMigrator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OlympusTokenMigrator__factory>;
    getContractFactory(
      name: "AccessControlledMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlledMock__factory>;
    getContractFactory(
      name: "DAI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DAI__factory>;
    getContractFactory(
      name: "IDAI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDAI__factory>;
    getContractFactory(
      name: "LibNote",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibNote__factory>;
    getContractFactory(
      name: "FRAX",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FRAX__factory>;
    getContractFactory(
      name: "IFRAX",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFRAX__factory>;
    getContractFactory(
      name: "LibNote",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibNote__factory>;
    getContractFactory(
      name: "MockERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockERC20__factory>;
    getContractFactory(
      name: "MockGOhm",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockGOhm__factory>;
    getContractFactory(
      name: "MockSOHM",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockSOHM__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IsOHMOLD",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IsOHMOLD__factory>;
    getContractFactory(
      name: "WOHM",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WOHM__factory>;
    getContractFactory(
      name: "OlympusAuthority",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OlympusAuthority__factory>;
    getContractFactory(
      name: "OlympusERC20Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OlympusERC20Token__factory>;
    getContractFactory(
      name: "YieldDirector",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.YieldDirector__factory>;
    getContractFactory(
      name: "SOlympus",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SOlympus__factory>;
    getContractFactory(
      name: "OlympusStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OlympusStaking__factory>;
    getContractFactory(
      name: "Distributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Distributor__factory>;
    getContractFactory(
      name: "OlympusBondingCalculator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OlympusBondingCalculator__factory>;
    getContractFactory(
      name: "OhmFaucet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OhmFaucet__factory>;
    getContractFactory(
      name: "OlympusTreasury",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OlympusTreasury__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Permit__factory>;
    getContractFactory(
      name: "FrontEndRewarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FrontEndRewarder__factory>;
    getContractFactory(
      name: "Governable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Governable__factory>;
    getContractFactory(
      name: "Guardable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Guardable__factory>;
    getContractFactory(
      name: "NoteKeeper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NoteKeeper__factory>;
    getContractFactory(
      name: "OlympusAccessControlled",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OlympusAccessControlled__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "VaultOwned",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaultOwned__factory>;
    getContractFactory(
      name: "GenesisClaim",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GenesisClaim__factory>;
    getContractFactory(
      name: "IClaim",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IClaim__factory>;
    getContractFactory(
      name: "IClaim",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IClaim__factory>;
    getContractFactory(
      name: "InvestorClaimV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InvestorClaimV2__factory>;

    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "AaveAllocator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveAllocator>;
    getContractAt(
      name: "ILendingPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILendingPool>;
    getContractAt(
      name: "IStakedTokenIncentivesController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakedTokenIncentivesController>;
    getContractAt(
      name: "AlchemixAllocator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AlchemixAllocator>;
    getContractAt(
      name: "IStakingPools",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakingPools>;
    getContractAt(
      name: "ITokemakManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokemakManager>;
    getContractAt(
      name: "ITokemaktALCX",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokemaktALCX>;
    getContractAt(
      name: "ConvexAllocator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConvexAllocator>;
    getContractAt(
      name: "IConvex",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IConvex>;
    getContractAt(
      name: "IConvexRewards",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IConvexRewards>;
    getContractAt(
      name: "ICurve3Pool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICurve3Pool>;
    getContractAt(
      name: "FraxSharesAllocator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FraxSharesAllocator>;
    getContractAt(
      name: "IveFXS",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IveFXS>;
    getContractAt(
      name: "IveFXSYieldDistributorV4",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IveFXSYieldDistributorV4>;
    getContractAt(
      name: "FraxSharesAllocatorVNext",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FraxSharesAllocatorVNext>;
    getContractAt(
      name: "GroDAIAllocator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GroDAIAllocator>;
    getContractAt(
      name: "IGroDepositHandler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGroDepositHandler>;
    getContractAt(
      name: "IGroWithdrawHandler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGroWithdrawHandler>;
    getContractAt(
      name: "ISwapRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISwapRouter>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "ILQTYStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILQTYStaking>;
    getContractAt(
      name: "IStabilityPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStabilityPool>;
    getContractAt(
      name: "LUSDAllocator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LUSDAllocator>;
    getContractAt(
      name: "IStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStaking>;
    getContractAt(
      name: "MetaGovernanceAllocator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MetaGovernanceAllocator>;
    getContractAt(
      name: "IMasterChef",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMasterChef>;
    getContractAt(
      name: "ISushiBar",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISushiBar>;
    getContractAt(
      name: "OnsenAllocator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OnsenAllocator>;
    getContractAt(
      name: "IOnsenAllocator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOnsenAllocator>;
    getContractAt(
      name: "RewardHarvester",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RewardHarvester>;
    getContractAt(
      name: "OlympusBondDepositoryV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OlympusBondDepositoryV2>;
    getContractAt(
      name: "GOHM",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GOHM>;
    getContractAt(
      name: "GOHMInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GOHMInterface>;
    getContractAt(
      name: "GovernorAlpha",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorAlpha>;
    getContractAt(
      name: "SOHMInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SOHMInterface>;
    getContractAt(
      name: "TimelockInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TimelockInterface>;
    getContractAt(
      name: "GovernorOHMegaDelegate",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorOHMegaDelegate>;
    getContractAt(
      name: "GovernorOHMegaDelegator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorOHMegaDelegator>;
    getContractAt(
      name: "GOHMInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GOHMInterface>;
    getContractAt(
      name: "GovernorAlpha",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorAlpha>;
    getContractAt(
      name: "GovernorOHMegaDelegateStorageV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorOHMegaDelegateStorageV1>;
    getContractAt(
      name: "GovernorOHMegaDelegatorStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorOHMegaDelegatorStorage>;
    getContractAt(
      name: "GovernorOHMegaEvents",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorOHMegaEvents>;
    getContractAt(
      name: "SOHMInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SOHMInterface>;
    getContractAt(
      name: "TimelockInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TimelockInterface>;
    getContractAt(
      name: "Timelock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Timelock>;
    getContractAt(
      name: "IAllocator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAllocator>;
    getContractAt(
      name: "IBondDepository",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBondDepository>;
    getContractAt(
      name: "IBondingCalculator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBondingCalculator>;
    getContractAt(
      name: "IDistributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDistributor>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IgOHM",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IgOHM>;
    getContractAt(
      name: "IGovernable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGovernable>;
    getContractAt(
      name: "IGuardable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGuardable>;
    getContractAt(
      name: "INoteKeeper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INoteKeeper>;
    getContractAt(
      name: "IOHM",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOHM>;
    getContractAt(
      name: "IOlympusAuthority",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOlympusAuthority>;
    getContractAt(
      name: "IOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOracle>;
    getContractAt(
      name: "IOwnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOwnable>;
    getContractAt(
      name: "IsOHM",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IsOHM>;
    getContractAt(
      name: "IStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStaking>;
    getContractAt(
      name: "IStakingV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakingV1>;
    getContractAt(
      name: "ITeller",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITeller>;
    getContractAt(
      name: "IManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IManager>;
    getContractAt(
      name: "ITreasury",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITreasury>;
    getContractAt(
      name: "ITreasuryV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITreasuryV1>;
    getContractAt(
      name: "IUniswapV2ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2ERC20>;
    getContractAt(
      name: "IUniswapV2Pair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Pair>;
    getContractAt(
      name: "IUniswapV2Router",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router>;
    getContractAt(
      name: "IWarmup",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWarmup>;
    getContractAt(
      name: "IwsOHM",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IwsOHM>;
    getContractAt(
      name: "IYieldDirector",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IYieldDirector>;
    getContractAt(
      name: "BalancerLiquidityMigrator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BalancerLiquidityMigrator>;
    getContractAt(
      name: "IBalancerVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBalancerVault>;
    getContractAt(
      name: "CrossChainMigrator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CrossChainMigrator>;
    getContractAt(
      name: "IMigrator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMigrator>;
    getContractAt(
      name: "LiquidityMigrator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LiquidityMigrator>;
    getContractAt(
      name: "OlympusTokenMigrator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OlympusTokenMigrator>;
    getContractAt(
      name: "AccessControlledMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlledMock>;
    getContractAt(
      name: "DAI",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DAI>;
    getContractAt(
      name: "IDAI",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDAI>;
    getContractAt(
      name: "LibNote",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibNote>;
    getContractAt(
      name: "FRAX",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FRAX>;
    getContractAt(
      name: "IFRAX",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFRAX>;
    getContractAt(
      name: "LibNote",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibNote>;
    getContractAt(
      name: "MockERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockERC20>;
    getContractAt(
      name: "MockGOhm",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockGOhm>;
    getContractAt(
      name: "MockSOHM",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockSOHM>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IsOHMOLD",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IsOHMOLD>;
    getContractAt(
      name: "WOHM",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WOHM>;
    getContractAt(
      name: "OlympusAuthority",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OlympusAuthority>;
    getContractAt(
      name: "OlympusERC20Token",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OlympusERC20Token>;
    getContractAt(
      name: "YieldDirector",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.YieldDirector>;
    getContractAt(
      name: "SOlympus",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SOlympus>;
    getContractAt(
      name: "OlympusStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OlympusStaking>;
    getContractAt(
      name: "Distributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Distributor>;
    getContractAt(
      name: "OlympusBondingCalculator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OlympusBondingCalculator>;
    getContractAt(
      name: "OhmFaucet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OhmFaucet>;
    getContractAt(
      name: "OlympusTreasury",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OlympusTreasury>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Permit>;
    getContractAt(
      name: "FrontEndRewarder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FrontEndRewarder>;
    getContractAt(
      name: "Governable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Governable>;
    getContractAt(
      name: "Guardable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Guardable>;
    getContractAt(
      name: "NoteKeeper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NoteKeeper>;
    getContractAt(
      name: "OlympusAccessControlled",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OlympusAccessControlled>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "VaultOwned",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VaultOwned>;
    getContractAt(
      name: "GenesisClaim",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GenesisClaim>;
    getContractAt(
      name: "IClaim",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IClaim>;
    getContractAt(
      name: "IClaim",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IClaim>;
    getContractAt(
      name: "InvestorClaimV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InvestorClaimV2>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
